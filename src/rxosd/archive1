#!/usr/bin/env pagsh
#
#  This script archives files to a single archival OSD whose number
#  must be supplied as argument (-o).
#
#  The way the servers to ask for files must be adopted to the local site.
#  In our (RZG) case we have a file in AFS which describes all servers.
#  Another possibility could be to ask the VLDB by 'vos listaddr'
#  
#  The script extracts the size range for the archival OSD from the 
#  osddb database.
#
#  In our case we want to have 2 archival copies per file. 
#  The archival OSDS here have size ranges which allow this for all files 
#  between 1mb and 100mb:
#
# 4 raid6           4095 gb  67.3 % up   arch  70  64     afs15.rz  0 (1mb-8mb)
# 5 tape            7442 gb  56.4 % up   arch  64  30     styx.rzg  0 (1mb-100gb)
#13 hsmgpfs         3139 gb  38.1 % up   arch  50  32     tsm.rzg. 12 (8mb-100gb)
#

# magix
Principal=archwipe
Keytab=/root/archwipe.keytab
ServerlistFile=/afs/ipp-garching.mpg.de/backups/servers
ArchiveGroup="__ALL__"
maxNumCandidates=2048
highWaterMark=800
osddbPort=7012
Interval=1800
TokenMaxLifeTime=36000
MsgDateFormat=+"%d.%m.%Y-%k:%M:%S"

# binaries, simple switch for transarc/Linux-system

if [ -d /var/log/openafs ]; then
    BOS=/usr/sbin/bos
    VOS=/usr/sbin/vos
    OSD=/usr/bin/osd
    FS=/usr/bin/fs
    TOKENS=/usr/bin/tokens
    UDEBUG=/usr/sbin/udebug
    LogDir=/var/log/openafs
else 
    BOS=/usr/afs/bin/bos
    VOS=/usr/afs/bin/vos
    OSD=/usr/afs/bin/osd
    TOKENS=/usr/afs/bin/tokens
    FS=/usr/afs/bin/fs
    UDEBUG=/usr/afs/bin/udebug
    LogDir=/usr/afs/logs
fi
KINIT=/usr/bin/kinit
KDESTROY=/usr/lib/mit/bin/kdestroy
AKLOG=/usr/bin/aklog

# variables default, may be changed on command line
Servers=
LogFileBaseName=
numCopies=2
doRedirect=0
flagWipeable=""
archivalOSD=0

# helper variables
skipped=0
dontsleep=0

# helper functions
rotateLog() {
    today=`date +%F`
    if [ "$today" != "$LogDay" ]; then
        mv $LogFile ${LogFileBaseName}-${LogDay}.log
        LogDay=$today
        LogFile=$LogDir/${LogFileBaseName}.log
        exec >> ${LogFile} 2>&1
        echo `date $MsgDateFormat` : Logfile rotated.
        echo `date $MsgDateFormat` : Started with options archivalOSD=$archivalOSD, ArchiveGroup=$ArchiveGroup, onlyWipeable=$flagWipeable, numCopies=$numCopies
    fi 
}

refreshServerList() {
    if [ "x$ArchiveGroup" = "x" -o "$ArchiveGroup" = "__ALL__" ]; then
        Servers=`grep openafs $ServerlistFile | awk '{print $1}'`
    else
        Servers=`grep openafs $ServerlistFile | grep $ArchiveGroup | awk '{print $1}'`
    fi
    echo `date $MsgDateFormat` :  New ServerList: $Servers 
    numServers=`echo "$Servers" | wc -l`
    echo `date $MsgDateFormat` : ServerList has $numServers entries. 
}

refreshToken() {
    if [ -e $KRB5CCNAME ]; then
        echo `date $MsgDateFormat` : Kerberos CCache $KRB5CCNAME already exists! 
        if [ -f $KRB5CCNAME ]; then
            rm $KRB5CCNAME
            echo `date $MsgDateFormat` : $KRB5CCNAME removed 
        else 
            echo `date $MsgDateFormat` : $KRB5CCNAME is not a file. Remove it by hand.
            exit 1 
        fi
    fi
    $KINIT -t $Keytab -k -c $KRB5CCNAME $Principal
    rc=$?
    if [ $rc != 0 ]; then
        echo `date $MsgDateFormat` : "Cannot get a kerberos-ticket. rc=$rc." 
        exit 1
    fi
    $AKLOG 
    rc=$?
    if [ $rc != 0 ]; then
        echo `date $MsgDateFormat` : "Cannot get an afs-token. rc=$rc."
        exit 1
    fi
    $KDESTROY
    echo `date $MsgDateFormat` : checking for tokens :
    out=`$TOKENS`
    echo `date $MsgDateFormat` : $out
}


# Parse command line options.
USAGE="Usage: `basename $0` [-hvRw] [-a ArchiveGroup] [-c numCopies] [-L logfilebasename], where:"
USAGE_1="-R=redirect all output,"
USAGE_2="-w=ignore files < minWipesize "
USAGE_3="logfilebasename will be extended by suffix '.log'"

while getopts ha:c:l:o:Rw OPT; do
    case "$OPT" in
        h)
            echo $USAGE
            echo $USAGE_1
            echo $USAGE_2
            exit 0
            ;;
        o)
            archivalOSD=$OPTARG
            ;;
        a)
            ArchiveGroup=$OPTARG
            ;;
        c)
            numCopies=$OPTARG
            ;;
        l)
            LogFileBaseName=$OPTARG
            ;;
        R)
            doRedirect=1
            ;;
        w)
            flagWipeable="-wipeable"
            ;;
        \?)
            # getopts issues an error message
            echo $USAGE >&2
            echo $USAGE_1 >&2
            echo $USAGE_2 >&2
            exit 1
            ;;
    esac
done

# set variables based on cmdline-args

KRB5CCNAME=/tmp/archive1-$archivalOSD-$ArchiveGroup
export KRB5CCNAME
LogDay=`date +%F`
if [ "x$LogFileBaseName" = "x" ]; then
    LogFileBaseName=Archive-${archivalOSD}-${ArchiveGroup}
fi
LogFile=$LogDir/${LogFileBaseName}.log

if [ $archivalOSD = 0 ];then
   echo "no archival OSD given." >&2
   exit 1
fi
isArchivalOSD=`$OSD listosds  | grep -v sizerange | awk '{if ($12 == "arch") {print $1}}' | grep -c -E "^$archivalOSD\$"`

if [ $isArchivalOSD = 0 ]; then 
   echo "Given OSD $archivalOSD not archival" >&2
   exit 1
fi


# redirect to Logfile if requested

if [ $doRedirect != 0 ]; then
    exec >> ${LogFile} 2>&1 # append if logfile exists   else 
fi

echo  `date $MsgDateFormat` : Started with options archivalOSD=$archivalOSD, ArchiveGroup=$ArchiveGroup, onlyWipeable=$flagWipeable, numCopies=$numCopies


# main loop

while [ 1 ]
do
    startTime=`date +%s`
    IamSyncsite=`$UDEBUG localhost $osddbPort | grep -c "I am sync site"`
    refreshServerList 
    if [ "x$Servers" = "x" ]; then # die if serverlist empty, so that it can be seen in bos status, if it persists
        echo `date $MsgDateFormat` : "Serverlist is empty! Dying..."
        exit 2
    fi
    if [ $IamSyncsite -ne 0 ]; then # only execute sth, when syncsite
        refreshToken
        authtime=`date +%s`
	pmUsed=999
	while [ $pmUsed -gt $highWaterMark ] # wait until archivalOSD is below highWatermark 
	do
		eval `$OSD osd $archivalOSD | awk '{
	        	if ($1 == "minSize") {
		    	    	printf("minSize=%u;\n", $3 * 1024)
	        	}
	        	if ($1 == "maxSize") {
		    	    	printf("maxSize=%u;\n", $3 * 1024)
 	        	}
	        	if ($1 == "alprior") {
		    	    	print "prior="$3";"
	        	}
			if ($1 == "pmUsed") {
		    	    	print "pmUsed="$3";"
			}
			if ($1 == "highWaterMark") {
		    	    	print "highWaterMark="$3";"
			}
	    	}'`
		if [ $pmUsed -gt $highWaterMark ]; then
			echo `date $MsgDateFormat` : archival OSD $archivalOSD too full, $pmUsed per mille, waiting 5 minutes
			sleep 300
		fi
	done
	
	echo `date $MsgDateFormat` : Archival OSD $archivalOSD has minsize $minSize and maxsize $maxSize

	for s in $Servers 
        do
	    # start with $archivalOSD-ID as offset, so that other instances start at a different server
            if [ $skipped -lt $archivalOSD ]; then
                skipped=`expr $skipped + 1`
		dontsleep=1
                continue
            fi
	    echo `date $MsgDateFormat` : Server $s
	    echo `date $MsgDateFormat` : vos arch $s -copies $numCopies -minsize $minSize -maxsize $maxSize -osd $archivalOSD $flagWipeable
	    fids=`$VOS arch $s -copies $numCopies -minsize $minSize -maxsize $maxSize -osd $archivalOSD -candidates $maxNumCandidates $flagWipeable -localauth | grep -v Fid |grep -v Tot |  awk '{print $1}'`
	    while [ "x$fids" != "x" ]
	    do
		archived=0
	        thisNumCand=`echo $fids | wc | awk '{print $2}'`
	        echo `date $MsgDateFormat` : Got $thisNumCand fids on server $s to archive on $archivalOSD
	        for f in $fids
	        do 	
		    $FS checkserver > /dev/null 2>&1
		    vol_vnode=`echo $f | awk -F\. '{print $1"."$2}'`
		    inUse=`fs threads -serv $s | grep -c $vol_vnode`
		    if [ $inUse -gt 0 ]; then
			echo `date $MsgDateFormat` : skipping $f, is presently in use
			continue
		    fi
		    existing_copies=`fs fidlistarch $f | grep -c ArchiveOsd`
		    if [ $existing_copies -ge $numCopies ]; then
			echo `date $MsgDateFormat` : skipping $f, has already $existing_copies copies
			continue
		    fi
		    echo `date $MsgDateFormat` : fs fidarchive -fid $f -osd $archivalOSD
		    output=`$FS fidarchive -fid $f -osd $archivalOSD  2>&1`
		    rc=$?
		    if [ $rc -eq 0 ]; then
			archived=1
		    else
			echo `date $MsgDateFormat` : Could not archive $f, error code was $rc
                        echo `date $MsgDateFormat` : Output=$output
                        if [ $rc = 28 ]; then  # we got ENOSPACE
			    echo `date $MsgDateFormat` : archival OSD $archivalOSD too full. rc=ENOSPC. Waiting 5 minutes
			    sleep 300
                        fi  
		    fi
    		    now=`date +%s`
    		    tokenlife=`expr $now - $authtime`
    		    if [ $tokenlife -gt $TokenMaxLifeTime ]; then
			pmUsed=999
			while [ $pmUsed -gt $highWaterMark ]
			do
				eval `$OSD osd $archivalOSD | awk '{
					if ($1 == "pmUsed") {
		    				print "pmUsed="$3";"
					}
					if ($1 == "highWaterMark") {
		    	    			print "highWaterMark="$3";"
					}
	    			}'`
				if [ $pmUsed -gt $highWaterMark ]; then
					echo `date $MsgDateFormat` : archival OSD $archivalOSD too full, $mpUsed per mille, waiting 5 minutes
					sleep 300
				fi
			done # while pmUsed
			echo `date $MsgDateFormat` : token already $tokenlife seconds old
                        refreshToken
    			authtime=`date +%s`
    		    fi
                rotateLog
	        done # for fids
		if [ $thisNumCand -eq $maxNumCandidates ]; then # the server has maybe more candidates available
		    if [ $archived -gt 0 ]; then # we archived at least one file
	    		echo `date $MsgDateFormat` : vos arch $s -copies $numCopies -minsize $minSize -maxsize $maxSize -osd $archivalOSD   
	    		fids=`$VOS arch $s -copies $numCopies -minsize $minSize -maxsize $maxSize -osd $archivalOSD -candidates $maxNumCandidates -localauth | grep -v Fid |grep -v Tot |  awk '{print $1}'`
		    else # we archived not a single object, so do not retry
			fids=
		    fi
		else # we got less candidates from server than we asked for, so no more avaiablable.
                    fids=
		fi
	    done # while fids
            rotateLog
        done # for Servers
    else
	echo `date $MsgDateFormat` : I am not syncsite, doing nothing
    fi
    rotateLog
    endTime=`date +%s`
    sleepTime=`expr $startTime + $Interval - $endTime`
    if [ $sleepTime -gt 0 ]; then
        if [ $dontsleep -eq 1 ]; then
            if [ $skipped -ge $archivalOSD ]; then
                dontsleep=0
            fi
        else
            echo `date $MsgDateFormat` : sleeping $sleepTime seconds
            sleep $sleepTime
        fi
    else
	echo `date $MsgDateFormat` : single execution of loop took longer than a normal interval, not sleeping.
    fi
done # while 1
