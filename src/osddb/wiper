#!/usr/bin/env pagsh

#
# This script wipes files from the running OSDs, all 
# information for that is gotten from the osddb
#


# magix
Principal=archwipe
Keytab=/root/archwipe.keytab
MsgDateFormat=+"%d.%m.%Y-%k:%M:%S"
SleepTime=600

# helper functions
rotateLog() {
    today=`date +%F`
    if [ "$today" != "$LogDay" ]; then
        mv $LogFile ${LogFileBaseName}-${LogDay}.log
        LogDay=$today
        LogFile=$LogDir/${LogFileBaseName}.log
        exec >> ${LogFile} 2>&1
        echo `date $MsgDateFormat` : Logfile rotated.
        echo `date $MsgDateFormat` : Started with options archivalOSD=$archivalOSD, ArchiveGroup=$ArchiveGroup, onlyWipeable=$flagWipeable, numCopies=$numCopies
    fi
}

refreshServerList() {
    if [ "x$ArchiveGroup" = "x" -o "$ArchiveGroup" = "__ALL__" ]; then
        Servers=`grep openafs $ServerlistFile | awk '{print $1}'`
    else
        Servers=`grep openafs $ServerlistFile | grep $ArchiveGroup | awk '{print $1}'`
    fi
    echo `date $MsgDateFormat` :  New ServerList: $Servers
    numServers=`echo "$Servers" | wc -l`
    echo `date $MsgDateFormat` : ServerList has $numServers entries.
}

refreshToken() {
    if [ -e $KRB5CCNAME ]; then
        echo `date $MsgDateFormat` : Kerberos CCache $KRB5CCNAME already exists!
        if [ -f $KRB5CCNAME ]; then
            rm $KRB5CCNAME
            echo `date $MsgDateFormat` : $KRB5CCNAME removed
        else
            echo `date $MsgDateFormat` : $KRB5CCNAME is not a file. Remove it by hand.
            exit 1
        fi
    fi
    $KINIT -t $Keytab -k -c $KRB5CCNAME $Principal
    rc=$?
    if [ $rc != 0 ]; then
        echo `date $MsgDateFormat` : "Cannot get a kerberos-ticket. rc=$rc."
        exit 1
    fi
    $AKLOG
    rc=$?
    if [ $rc != 0 ]; then
        echo `date $MsgDateFormat` : "Cannot get an afs-token. rc=$rc."
        exit 1
    fi
    $KDESTROY
    echo `date $MsgDateFormat` : checking for tokens :
    out=`$TOKENS`
    echo `date $MsgDateFormat` : $out
}


if [ -d /var/log/openafs ]; then
    BOS=/usr/sbin/bos
    VOS=/usr/sbin/vos
    OSD=/usr/bin/osd
    FS=/usr/bin/fs
    TOKENS=/usr/bin/tokens
    UDEBUG=/usr/sbin/udebug
    LogDir=/var/log/openafs
else
    BOS=/usr/afs/bin/bos
    VOS=/usr/afs/bin/vos
    OSD=/usr/afs/bin/osd
    TOKENS=/usr/afs/bin/tokens
    FS=/usr/afs/bin/fs
    UDEBUG=/usr/afs/bin/udebug
    LogDir=/usr/afs/logs
fi
KINIT=/usr/bin/kinit
KDESTROY=/usr/lib/mit/bin/kdestroy
AKLOG=/usr/bin/aklog

KRB5CCNAME=/tmp/wiper.krb5
export KRB5CCNAME
LogDay=`date +%F`
LogFileBaseName=WiperLog
LogFile=$LogDir/${LogFileBaseName}.log

# redirect all output

if [ -f $LogDir/WiperLog ]; then
    mv $LogDir/WiperLog $LogDir/WiperLog.`date +"%F_%H:%M"`
fi
exec > $LogDir/WiperLog 2>&1



while [ 1 ] 
do
    IamSyncsite=`$UDEBUG localhost 7012 | grep -c "I am sync site"`
    if [ $IamSyncsite -ne 0 ]; then
        # refresh list of osds
        osds=`$OSD list -wipeable | grep -v "id     name" |awk '{print $1}'`
        refreshToken
        for o in $osds
        do
	    newestWiped=0
	    newnewest=0
	    minMB=0
	    eval `$OSD osd $o | awk '
	        BEGIN{}
	        {
		    if ($1=="pmUsed") {
		        pmused = $3
		    }
		    if ($1=="highWaterMark") {
		        hw = $3
		    } 
		    if ($1=="totalSize") {
		        tot = $3
		    }
		    if ($1=="minWipeSize") {
		        print "minMB="$3";"
		    }
		    if ($1=="newest" && $2=="wiped") {
		        print "newestWiped="$4";"
		    }
	        }
	        END{
		    if (pmused < hw) {
		        kb = 0;
		    } else {
		        kb = int((pmused - hw) * tot)
		    }
		    printf("kb=%u; used=%u;\n", kb, pmused)
	        }'`
     	    echo `date $MsgDateFormat` : OSD $o: used = $used/1000, wipe $kb kb
	    while [ $kb -gt 0 ]
	    do
		success=0
	        candfile=/tmp/wipe-cand.$o
	        candvolfile=/tmp/wipe-candvols.$o
	        if [ -f $candvolfile ]; then
		    rm $candvolfile
	        fi
	        echo `date $MsgDateFormat` : $OSD wipecand $o -max 1000 -crit 0 -minMB $minMB -seconds
	        $OSD wipecand $o -max 1000 -crit 0 -minMB $minMB -seconds > $candfile
	        fids=`cat $candfile | awk '{print $4}'`
		if [ "x$fids" == "x" ]; then
			break;
		fi
	        for f in $fids
	        do
		    $FS checkserver 
		    fid=`grep $f $candfile | awk '{print $5}'`
		    tag=`echo $f| awk -F\. '{print $4}'`
		    if [ "$f" != "$fid.$tag" ]; then
		        echo `date $MsgDateFormat` : $f belongs to $fid 
		    fi
		    actual=`$FS fidosd $fid | grep osd=$o | grep -c $f`
		    if [ $actual -eq 0 ]; then
			rc=22
		    else
		        echo `date $MsgDateFormat` : $FS fidwipe $fid
		        $FS fidwipe $fid
		        rc=$?
		    fi
		    if [ $rc -eq 22 ]; then
			# 
			# Error handling:
			# 
			# return code was EINVAL which could mean
			# this object is not part of the file any more
			#
			$FS fidosd $fid
			active=1
			active=`$FS fidosd $fid | grep -c osd=$o`
			if [ $active -eq 0 ]; then
			    ro=`$VOS ex $f | grep ROnly: | awk '{print $4}'`
			    if [ "x$ro" != "x" ]; then
				eval `echo $fid | awk -F\. '{printf("vn=%s; un=%s;\n", $2, $3)}'`
				fid2=$ro.$vn.$un
				$FS fidosd $fid2
				active=1
				active=`$FS fidosd $fid2 | grep -c osd=$o`
				if [ $active -eq 0 ]; then
				    $OSD ex $o $f 
				    lc=`$OSD ex $o $f | awk '{print $6}'`
				    if [ $lc -lt 32 ]; then
					while [ $lc -gt 0 ]
				    	do
					    echo `date $MsgDateFormat` : $OSD decr $o $f 
					    lc=`expr $lc - 1`
				        done
				    else
					echo `date $MsgDateFormat` : ATTENTION: bad link count for $f on OSD $o
				    fi
				fi
			    fi
			fi 
		    fi
		    if [ $rc -eq 0 ]; then
		        v=`echo $f | awk -F\. '{print $1}'`
		        echo $v >> $candvolfile
			eval `grep $f $candfile | awk '{d=$3/1024; printf("diff=%d; newest=%u",int(d),int($2))}'`
			# echo diff=$diff  newest=$newest
			if [ $newest -gt $newnewest ]; then
			 	newnewest=$newest
			fi
		        echo `date $MsgDateFormat` : wiping of $f may free $diff kb
		        kb=`expr $kb -  $diff `
		        echo `date $MsgDateFormat` : still $kb kb to wipe
			success=1
		    fi
		    if [ $kb -le 0 ] ; then
		        break	
		    fi
	        done # for f in $fids
		echo `date $MsgDateFormat` : newnewest=$newnewest newestWiped=$newestWiped
		if [ $newnewest -gt $newestWiped ]; then
		    echo `date $MsgDateFormat` : $OSD setosd $o -newestwiped $newnewest
		    $OSD setosd $o -newestwiped $newnewest
		fi
		if [ -f $candvolfile ]; then
	        	volumes=`cat $candvolfile | sort -u`
	        	for v in $volumes
	        	do
		    	$VOS rel $v -localauth
	        	done
		fi
		if [ $success -eq 0 ]; then
		 	break
		fi
            rotateLog
	    done # while $kb > 0
        rotateLog
        done  # for o in $osd
    else
	echo `date $MsgDateFormat` : I am not syncsite, doing nothing
    fi
    rotateLog
    echo `date $MsgDateFormat` : sleeping $SleepTime seconds
    sleep $SleepTime
done
